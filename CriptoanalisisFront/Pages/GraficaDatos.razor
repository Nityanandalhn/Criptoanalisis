@using Entidades
@using Plotly.Blazor.Examples
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@using System.Diagnostics
@using Blazor_Layout = Plotly.Blazor.Layout
@using Examples_Helper = Plotly.Blazor.Examples.Helper
@using Title = Plotly.Blazor.LayoutLib.Title
@using YAxis = Plotly.Blazor.LayoutLib.YAxis
@page "/graficas"
@inject HttpClient Http

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />

<div class="text-right">
    <BSButton Color="BSColor.Primary" @onclick="() => chart.Clear()">Clear</BSButton>
    <span class="@BS.Input_Group_Text">Par</span>
    <BSInput InputType="InputType.Text" @bind-Value="@Par"/>
    <span class="@BS.Input_Group_Text">Mercado</span>
    <BSInput InputType="InputType.Text" @bind-Value="@Mercado"/>
    <BSButton Color="BSColor.Primary" @onclick="() => CargarDatos(1000, Par, Mercado)">Añadir Estadística</BSButton>
    <BSButton Color="BSColor.Primary" @onclick="() => ExportImage()">Exportar Imagen</BSButton>
    <BSButton Color="BSColor.Primary" @onclick="() => DownloadImage()">Descargar</BSButton>
</div>

@if (imgSource != null)
{
    <div style="margin-top:auto; margin-bottom:auto;text-align:center;">
        <br />
        <h2>Exportar como imagen</h2>
        <img src="@imgSource" />
    </div>
}

@code
{
    private string Par { get; set; } = "";
    private string Mercado { get; set; } = "";
    private PlotlyChart chart;
    private Config config = new()
        {
            Responsive = true
        };

    private IList<ITrace> data = new List<ITrace> {};

    private string imgSource;

    private Layout layout = new()
        {
            Title = new Title { Text = "Scatter" },
            YAxis = new List<YAxis>
        {
            new()
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = "Scatter Unit" }
            }
        }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarDatos(1000, "OPUL_USDT", "mexc");
            await CargarDatos(1000, "BNC_USDT", "mexc");
        }
    }

    private async Task DeleteScatter()
    {
        await chart.DeleteTrace(0);
    }

    private async Task ExportImage()
    {
        imgSource = await chart.ToImage(ImageFormat.Png, 400, 800);
    }

    private async Task DownloadImage()
    {
        await chart.DownloadImage(ImageFormat.Png, 400, 800, "Grafico");
    }

    private async Task CargarDatos(int count, string par, string mercado)
    {
        var scatter = new Scatter
            {
                Name = $"{mercado} {par}",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = new List<object>(),
                Y = new List<object>()
            };
        data.Add(scatter);

        var respuesta = await Http.PostAsJsonAsync<string>($"https://localhost:7289/api/ApiConfig/Intercambios/{count}/{par}", mercado);
        var datos = await respuesta.Content.ReadFromJsonAsync<List<Intercambio>>();
        layout.YAxis.First().Title.Text = "Último valor del intercambio";
        layout.Title.Text = "Desglose de valores en el tiempo";
        datos.Select(dato => dato.Fecha).ToList().ForEach(x => scatter.X.Add(x));
        datos.Select(dato => dato.Reciente).ToList().ForEach(y => scatter.Y.Add(y));
        await chart.React();
    }
}