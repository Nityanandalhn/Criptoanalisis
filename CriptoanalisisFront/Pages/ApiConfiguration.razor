@inject HttpClient Http
@page "/config"
@using Entidades

<BSContainer Container="Container.Fluid">
    <BSRow Align="Align.Start">
        <BSCol>
            <div class="@BS.Input_Group mb-3">
                <span class="@BS.Input_Group_Text">URL</span>
                <BSInput IsDisabled=@Cargando InputType="InputType.Text" placeholder="URL"  @bind-Value="@EndpointURL"/>
            </div>
            @foreach(CreateParamDto param in CreateParams!)
            {
                <div class="@BS.Input_Group mb-3">
                    <span class="@BS.Input_Group_Text">@param.Mapea</span>
                    <BSInput IsDisabled=@Cargando InputType="InputType.Text" placeholder="@param.Mapea" @bind-Value="@param.Valor"/>
                </div>
            }
            <BSButton IsDisabled=@Cargando Color="BSColor.Primary" MarginBottom="Margins.Medium" OnClick="InsertarNuevoEndpoint">Nuevo Endpoint</BSButton>
        </BSCol>
    </BSRow>
    <BSRow Align="Align.Center">
        <BSCol>
            <BSTable IsBordered="true" IsResponsive="true" IsStriped="true" IsCaptionTop="true">
                <caption>Listado de endpoints activos</caption>
                <BSTBody>
                    @foreach(VisualEndpoint endpoint in Endps!)
                    {
                        <BSTR AlignRow="AlignRow.Middle">
                            <BSTD @onclick="() => AlternarEndpoint(endpoint)" ColSpan="@endpoint.ColSpan" Color="BSColor.Info">@endpoint.URL</BSTD>
                            <BSTD hidden="@endpoint.BtnEliminarEscondido">
                                <BSButton OnClick="() => EliminarEndpoint(endpoint)" Color="BSColor.Danger">X</BSButton>
                            </BSTD>
                        </BSTR>
                        @foreach(Parametro param in @endpoint.Parametros!)
                        {
                            <BSTR AlignRow="AlignRow.Middle">
                                <BSTD>@param.Valor</BSTD>
                                <BSTD>@param.Mapea</BSTD>
                            </BSTR>
                        }
                    }
                </BSTBody>
            </BSTable>
        </BSCol>
    </BSRow>
    <BSRow Align="Align.End">
        <BSCol>
            <BSInput InputType="InputType.Select" @bind-Value="_monedasSeleccionadas" size="@Monedas!.Count">
                @foreach(Moneda moneda in Monedas)
                {
                    <option value="@moneda.Nombre">@moneda.Nombre</option>
                }
            </BSInput>
        </BSCol>
        <BSCol>
            @String.Join(", ", _monedasSeleccionadas)
        </BSCol>
    </BSRow>
</BSContainer>

@code {
    private string[] _monedasSeleccionadas = new string[]{};
    private List<Moneda>? Monedas { get; set; } = new();
    private List<VisualEndpoint>? Endps { get; set; } = new();
    private List<CreateParamDto>? CreateParams { get; set; }

    private string EndpointURL { get; set; } = "";

    private bool Cargando { get; set; } = true;



    protected override async Task OnInitializedAsync()
    {
        Cargando = true;

        CreateParams = new()
        {
            new CreateParamDto()
            {
                Mapea = "Nombre"
            },
            new CreateParamDto()
            {
                Mapea = "Intercambiado"
            },
            new CreateParamDto()
            {
                Mapea = "Volumen"
            },
            new CreateParamDto()
            {
                Mapea = "Abierto"
            },
            new CreateParamDto()
            {
                Mapea = "Ultimo"
            },
            new CreateParamDto()
            {
                Mapea = "Alto"
            },
            new CreateParamDto()
            {
                Mapea = "Bajo"
            }
        };

        Monedas = await Http.GetFromJsonAsync<List<Moneda>>("https://localhost:7289/api/ApiConfig/Monedas");
        Endps = await Http.GetFromJsonAsync<List<VisualEndpoint>>("https://localhost:7289/api/ApiConfig/EndpointsPorUsuario/1");
        Cargando = false;
    }

    private class Moneda
    {
        public string? Nombre { get; set; }
    }

    private class Parametro {
        public string? Valor { get; set; }
        public string? Mapea { get; set; }
        public string? Tipo { get; set; } = "salida";
    }

    private class VisualEndpoint
    {
        public List<Parametro>? Parametros { get; set; }
        public string? URL { get; set; }
        public int Id { get; set; }
        public bool BtnEliminarEscondido { get; set; } = true;
        public string ColSpan { get => BtnEliminarEscondido ? "2" : "1"; }
    }

    private class CreateEndpointsDto
    {
        public string? URL { get; set; }
        public string Tipo { get; set; } = "GET";
    }

    private class CreateParamDto
    {
        public string Valor { get; set; } = "";
        public string? Tipo { get; set; } = "salida";
        public string? Mapea { get; set; }
    }

    private async void InsertarNuevoEndpoint()
    {
        Cargando = true;
        var respuesta = await Http.PostAsJsonAsync<CreateEndpointsDto>("https://localhost:7289/api/ApiConfig/NuevoEndpoint/1", new CreateEndpointsDto()
        {
            URL = EndpointURL
        });
        if(respuesta.StatusCode == System.Net.HttpStatusCode.Created)
        {
            var edp = await respuesta.Content.ReadFromJsonAsync<VisualEndpoint>();
            Console.WriteLine(edp!.Id);
            RecargarDatos();
            CreateParams!.ForEach(x => VincularParametroConEndpoint(x, edp.Id));
        }
        Console.WriteLine(respuesta);
        LimpiarInputs();

        Cargando = false;
        StateHasChanged();
        Console.WriteLine("TERMINADO");
    }

    private async void VincularParametroConEndpoint(CreateParamDto param, int edpId) 
        => await Http.PutAsJsonAsync<CreateParamDto>($"https://localhost:7289/api/ApiConfig/IncluirParametroEnEndpoint/{edpId}", param);

    private void LimpiarInputs()
    {
        EndpointURL = "";
        CreateParams!.ForEach(x => x.Valor = "");
    }
    private void AlternarEndpoint(VisualEndpoint edp)
    {
        edp.BtnEliminarEscondido = !edp.BtnEliminarEscondido;
        StateHasChanged();
    }

    private async void EliminarEndpoint(VisualEndpoint edp)
    {
        Cargando = true;
        var peticion = new HttpRequestMessage()
        {
            Method = HttpMethod.Delete,
            RequestUri = new Uri("https://localhost:7289/api/ApiConfig/EliminarEndpointPorUrl"),
            Content = JsonContent.Create(edp.URL)
        };
        var respuesta = await Http.SendAsync(peticion);
        RecargarDatos();
        Cargando = false;
        StateHasChanged();
    }

    private async void RecargarDatos()
    {
        Monedas = await Http.GetFromJsonAsync<List<Moneda>>("https://localhost:7289/api/ApiConfig/Monedas");
        Endps = await Http.GetFromJsonAsync<List<VisualEndpoint>>("https://localhost:7289/api/ApiConfig/EndpointsPorUsuario/1");
        StateHasChanged();
    }
}
