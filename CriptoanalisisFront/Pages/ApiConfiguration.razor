@inject HttpClient Http
@page "/config"
@using Entidades

<BSContainer Container="Container.Fluid">
    <BSRow Align="Align.Start">
        <BSCol>
            <div class="@BS.Input_Group mb-3">
                <span class="@BS.Input_Group_Text">URL</span>
                <BSInput IsDisabled=@Cargando InputType="InputType.Text" placeholder="URL"  @bind-Value="@EndpointURL"/>
            </div>
            @foreach(CreateParamDto param in CreateParams!)
            {
                <div class="@BS.Input_Group mb-3">
                    <span class="@BS.Input_Group_Text">@param.Mapea</span>
                    <BSInput IsDisabled=@Cargando InputType="InputType.Text" placeholder="@param.Mapea" @bind-Value="@param.Valor"/>
                </div>
            }
            <BSButton IsDisabled=@Cargando Color="BSColor.Primary" MarginBottom="Margins.Medium" OnClick="InsertarNuevoEndpoint">Nuevo Endpoint</BSButton>
        </BSCol>
    </BSRow>
    <BSRow Align="Align.Center">
        <BSCol>
            <table class="table">
                @foreach(Endpoints endpoint in Endps!)
                {
                    <tbody>
                        <tr>
                            <td colspan="2">@endpoint.URL</td>
                        </tr>
                        @foreach(Parametro param in @endpoint.Parametros!)
                        {
                            <tr>
                                <td>@param.Valor</td>
                                <td>@param.Mapea</td>
                            </tr>
                        }
                    </tbody>
                }
            </table>
        </BSCol>
    </BSRow>
    <BSRow Align="Align.End">
        <BSCol>
            <BSInput InputType="InputType.Select" @bind-Value="_monedasSeleccionadas" size="@Monedas!.Count">
                @foreach(Moneda moneda in Monedas)
                {
                    <option value="@moneda.Nombre">@moneda.Nombre</option>
                }
            </BSInput>
            @String.Join(", ", _monedasSeleccionadas)
        </BSCol>
    </BSRow>
</BSContainer>

@code {
    private string[] _monedasSeleccionadas = new string[]{};
    private List<Moneda>? Monedas { get; set; } = new();
    private List<Endpoints>? Endps { get; set; } = new();
    private List<CreateParamDto>? CreateParams { get; set; }

    private string EndpointURL { get; set; } = "";

    private bool Cargando { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        Cargando = true;

        CreateParams = new()
        {
            new CreateParamDto()
            {
                Mapea = "Nombre"
            },
            new CreateParamDto()
            {
                Mapea = "Intercambiado"
            },
            new CreateParamDto()
            {
                Mapea = "Volumen"
            },
            new CreateParamDto()
            {
                Mapea = "Abierto"
            },
            new CreateParamDto()
            {
                Mapea = "Ultimo"
            },
            new CreateParamDto()
            {
                Mapea = "Alto"
            },
            new CreateParamDto()
            {
                Mapea = "Bajo"
            }
        };

        Monedas = await Http.GetFromJsonAsync<List<Moneda>>("https://localhost:7289/api/ApiConfig/Monedas");
        Endps = await Http.GetFromJsonAsync<List<Endpoints>>("https://localhost:7289/api/ApiConfig/EndpointsPorUsuario/1");
        Cargando = false;
    }

    private class Moneda
    {
        public string? Nombre { get; set; }
    }

    private class Parametro {
        public string? Valor { get; set; }
        public string? Mapea { get; set; }
        public string? Tipo { get; set; } = "salida";
    }

    private class Endpoints
    {
        public List<Parametro>? Parametros { get; set; }
        public string? URL { get; set; }
        public int Id { get; set; }
    }

    private class CreateEndpointsDto
    {
        public string? URL { get; set; }
        public string Tipo { get; set; } = "GET";
    }

    private class CreateParamDto
    {
        public string Valor { get; set; } = "";
        public string? Tipo { get; set; } = "salida";
        public string? Mapea { get; set; }
    }

    private async void InsertarNuevoEndpoint()
    {
        Cargando = true;
        var respuesta = await Http.PostAsJsonAsync<CreateEndpointsDto>("https://localhost:7289/api/ApiConfig/NuevoEndpoint/1", new CreateEndpointsDto()
        {
            URL = EndpointURL
        });
        if(respuesta.StatusCode == System.Net.HttpStatusCode.Created)
        {
            var edp = await respuesta.Content.ReadFromJsonAsync<Endpoints>();
            Console.WriteLine(edp!.Id);

            CreateParams!.ForEach(x => VincularParametroConEndpoint(x, edp.Id));
        }
        Console.WriteLine(respuesta);
        LimpiarInputs();
        Monedas = await Http.GetFromJsonAsync<List<Moneda>>("https://localhost:7289/api/ApiConfig/Monedas");
        Endps = await Http.GetFromJsonAsync<List<Endpoints>>("https://localhost:7289/api/ApiConfig/EndpointsPorUsuario/1");
        Cargando = false;
        StateHasChanged();
        Console.WriteLine("TERMINADO");
    }

    private async void VincularParametroConEndpoint(CreateParamDto param, int edpId) 
    => await Http.PutAsJsonAsync<CreateParamDto>($"https://localhost:7289/api/ApiConfig/IncluirParametroEnEndpoint/{edpId}", param);

    private void LimpiarInputs()
    {
        EndpointURL = "";
        CreateParams!.ForEach(x => x.Valor = "");
    }
}
